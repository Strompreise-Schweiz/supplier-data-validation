name: "Reusable: Validate supplier & logo"

on:
  workflow_call:
    inputs:
      supplier_schema_version:
        description: "Supplier schema version to validate against (e.g. v1, v2)"
        required: true
        default: "v1"
        type: string

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      # 1) Check out the customer repository
      - uses: actions/checkout@v4

      # 2) Set up Node.js 20
      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install ajv + formats
        run: npm i -g ajv-cli@5 ajv-formats

      # 3) Download supplier schema (version from input)
      - name: Download supplier schema
        run: |
          curl -fsSL \
            https://raw.githubusercontent.com/Strompreise-Schweiz/supplier-data-validation/main/supplier/${{ inputs.supplier_schema_version }}/supplier.schema.json \
            -o _supplier.schema.json

      # 4) Validate supplier.json (strict mode)
      - name: Validate supplier.json
        run: >
          ajv validate
          -c ajv-formats
          -s _supplier.schema.json
          -d data/supplier.json
          --spec=draft2020
          --strict=true

      # 5) Validate assets/logo.png (existence, PNG format, 1000x1000)
      - name: Validate assets/logo.png (PNG, 1000x1000)
        shell: node {0}
        run: |
          const fs = require('fs');
          const path = require('path');

          const file = 'assets/logo.png';
          function fail(msg){ console.error(`::error::${msg}`); process.exit(1); }

          // Existence + correct file name
          if (!fs.existsSync(file)) fail(`${file} missing`);
          if (path.basename(file) !== 'logo.png') fail(`file must be named exactly "logo.png"`);

          // PNG signature check
          const buf = fs.readFileSync(file);
          if (buf.length < 33) fail('logo.png too small / corrupted');
          const sig = buf.subarray(0,8).toString('hex');
          if (sig !== '89504e470d0a1a0a') fail('logo.png is not a valid PNG');

          // Parse IHDR chunk: width/height are big-endian at offsets 16..23
          const width  = buf.readUInt32BE(16);
          const height = buf.readUInt32BE(20);

          if (width !== 1000 || height !== 1000) {
            fail(`${file} has ${width}x${height}, expected 1000x1000`);
          }
          console.log(`${file} OK (valid PNG, 1000x1000)`);
